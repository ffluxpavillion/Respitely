const mongoose = require('mongoose');

const mealTimeSchema = new mongoose.Schema({ // start & end times for each meal
  start: { type: String, required: true },
  end: { type: String, required: true }
}, { _id: false }); // Prevents Mongoose creating _id

const dailyScheduleSchema = new mongoose.Schema({ // operating hours & meal times
  hours:
    {
      open: { type: String, required: true },
      close: { type: String, required: true }
    },
  meals: {
    breakfast: mealTimeSchema,
    lunch: mealTimeSchema,
    dinner: mealTimeSchema,
    snack: mealTimeSchema,
  }
}, { _id: false });

const addressSchema = new mongoose.Schema({ // address of meal provider
  street: { type: String, required: true },
  city: { type: String, required: true },
  province: { type: String, required: true },
  postal_code: { type: String, required: true },
}, { _id: false });

const contactSchema = new mongoose.Schema({ // contact information for meal provider
  phone: {
    primary: {
      number: { type: String, required: true },
      ext: { type: String }
    },
    secondary: {
      number: { type: String },
      ext: { type: String }
    }
  },
  website: { type: String, required: true }
}, { _id: false });

const mealSchema = new mongoose.Schema({ // meal provider schema
  name: { type: String, required: true },
  address: addressSchema,
  latitude: { type: Number, required: true },
  longitude: { type: Number, required: true },
  contact: contactSchema,
  population: { type: String, required: true },
  notes: { type: String },
  service_dog_allowed: { type: Boolean, required: true },
  wheelchair_accessible: { type: Boolean, required: true },
  schedule: {
    monday: dailyScheduleSchema,
    tuesday: dailyScheduleSchema,
    wednesday: dailyScheduleSchema,
    thursday: dailyScheduleSchema,
    friday: dailyScheduleSchema,
    saturday: dailyScheduleSchema,
    sunday: dailyScheduleSchema,
  },
  claimed_by: { type: String },
  last_updated: { type: Date }
}, { collection: 'drop_in_meals' });

mealSchema.set('toJSON', { // Forcing mongoose to output JSON in specific order
  transform: (doc, ret) => {
    return {
      _id: ret._id,
      name: ret.name,
      address: ret.address,
      latitude: ret.latitude,
      longitude: ret.longitude,
      contact: ret.contact,
      population: ret.population,
      notes: ret.notes,
      service_dog_allowed: ret.service_dog_allowed,
      wheelchair_accessible: ret.wheelchair_accessible,
      schedule: ret.schedule,
      claimed_by: ret.claimed_by,
      last_updated: ret.last_updated
    };
  }
});


const VancouverMeal = mongoose.createConnection(process.env.MONGODB_URI_VANCOUVER).model('Meal', mealSchema);

module.exports = VancouverMeal;